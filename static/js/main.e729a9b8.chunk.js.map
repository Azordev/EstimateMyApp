{"version":3,"sources":["util/serviceWorker.js","store/globalContext.js","store/globalStore.js","component/Nav/style/component.jsx","component/Nav/visual/Nav.jsx","component/Page/Page.jsx","page/Home/style/component.jsx","page/App/Form/Form.jsx","page/Home/Home.jsx","router/AppRouter.js","index.js"],"names":["Boolean","window","location","hostname","match","globalContext","createContext","Provider","GlobalStore","_ref","_ref$children","children","undefined","_useState","useState","_useState2","Object","slicedToArray","pageName","setPageName","_useState3","_useState4","clientID","setClientID","_useState5","_useState6","projectType","setProjectType","_useState7","_useState8","project","setProject","react_default","a","createElement","value","state","actions","setState","key","console","error","submitProject","log","Nav","styled","div","_templateObject","NavHeader","_templateObject2","NavLeft","_templateObject3","NavCenter","_templateObject4","NavRight","_templateObject5","MenuLink","_templateObject6","AppNav","href","Page","globalStore","Grommet","theme","grommet","full","visual_Nav","ProfileContainer","component_templateObject","ProfileDetails","component_templateObject2","ProfileDetailsLeft","component_templateObject3","ProfileDetailsRight","component_templateObject4","img","component_templateObject5","component_templateObject6","_templateObject7","h3","_templateObject8","p","_templateObject9","_templateObject10","_templateObject11","Form","name","setName","type","setType","description","setDescription","errors","setErrors","useContext","validate","Box","align","width","margin","onSubmit","event","preventDefault","FormField","label","TextInput","placeholder","onChange","e","target","Select","options","TextArea","tag","top","Button","primary","Home","selectedColor","setSelectedColor","Accordion","animate","AccordionPanel","direction","pad","background","justify","Workshop","color","size","Form_Form","Text","border","icon","Desktop","onClick","Fragment","Android","Apple","Robot","AppRouter","react_router_dom","component_Page_Page","react_router","path","exact","component","page_Home_Home","ReactDOM","render","router_AppRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e729a9b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createContext } from 'react';\n\nconst globalContext = createContext();\nexport default globalContext;","import React, { useState } from 'react'\nimport globalContext from './globalContext';\n\nconst { Provider } = globalContext;\n\nconst GlobalStore = ({ children = undefined }) => {\n\n  const [pageName, setPageName] = useState('')\n  const [clientID, setClientID] = useState('')\n  const [projectType, setProjectType] = useState('')\n  const [project, setProject] = useState({})\n\n  const setState = (key, value) => {\n    switch (key) {\n      case 'pageName':\n        setPageName(value);\n        break;\n      case 'clientID':\n        setClientID(value);\n        break;\n      case 'projectType':\n        setProjectType(value);\n        break;\n      case 'project':\n        setProject(value);\n        break;\n      default:\n        console.error('setState with incorrect key. Check trace.')\n        break;\n    }\n  }\n\n  const submitProject = () => {\n    console.log('A revoir, project settings!')\n  }\n\n  return (\n    <Provider\n      value={{\n        state: {\n          pageName,\n          clientID,\n          projectType,\n          project\n        },\n        actions: {\n          setState,\n          submitProject\n        }\n      }}\n    >\n      {children}\n    </Provider>\n  )\n}\n\nexport default GlobalStore\n","import styled from 'styled-components'\n\nexport const Nav = styled.div`\n  background-color: #fff;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n`;\n\nexport const NavHeader = styled.div`\n  max-width: 1010px;\n  padding: 26px 20px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n`;\n\nexport const NavLeft = styled.div`\n  width: 33.333%;\n  text-align: left;\n`;\n\nexport const NavCenter = styled.div`\n  width: 33.333%;\n  text-align: center;\n`;\n\nexport const NavRight = styled.div`\n  width: 33.333%;\n  text-align: right;\n\n  svg {\n    margin-right: 20px;\n  }\n`;\n\nexport const MenuLink = styled.a``;","import React from 'react'\nimport { Nav, NavHeader, NavLeft, NavCenter, NavRight, MenuLink } from '../style/component'\n\nconst AppNav = () => (\n    <Nav>\n        <NavHeader>\n            <NavLeft>\n                <MenuLink href='http://www.google.com'>\n                    Root\n                </MenuLink>\n            </NavLeft>\n            <NavCenter>\n                j\n            </NavCenter>\n            <NavRight>\n                l\n            </NavRight>\n        </NavHeader>\n    </Nav>\n)\n\n\nexport default AppNav","import React from 'react'\nimport { Grommet, grommet } from 'grommet';\nimport GlobalStore from '../../store/globalStore';\nimport AppNav from '../Nav/visual/Nav';\n\nconst Page = ({ children = undefined }) => (\n    <GlobalStore>\n        <Grommet theme={ grommet } full>\n        <AppNav />\n        {children}\n        </Grommet>\n    </GlobalStore>\n)\n\nexport default Page","import styled from 'styled-components'\n\nexport const ProfileContainer = styled.div`\n  max-width: 1010px;\n  width: 100%;\n  margin: 20px auto;\n`;\n\nexport const ProfileDetails = styled.div`\n  display: flex;\n`;\n\nexport const ProfileDetailsLeft = styled.div`\n  margin-right: 40px;\n  width: 300px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ProfileDetailsRight = styled.div`\n  display: flex;\n  align-items: end;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const ProfileImage = styled.img`\n  border-radius: 50%;\n  width: 150px;\n  border: 1px solid #ccc;\n  padding: 5px;\n`;\n\nexport const ProfileDetailsUsername = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const EditProfileButton = styled.div`\n  background-color: transparent;\n  border: 1px solid #dbdbdb;\n  color: #262626;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 600;\n  padding: 5px 9px;\n  text-transform: capitalize;\n  font-size: 14px;\n  margin-left: 20px;\n`;\n\nexport const HeadingThreeText = styled.h3``;\n\nexport const ParagraphText = styled.p`\n  margin-right: 25px;\n`;\n\nexport const ProfileDetailsMeta = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const ProfileDetailsName = styled.div`\n  text-align: left;\n`;","import React, { useState, useContext } from 'react'\nimport {\n    Box,\n    Button,\n    FormField,\n    Select,\n    TextArea,\n    TextInput\n} from \"grommet\";\nimport globalContext from '../../../store/globalContext';\n\nfunction Form() {\n    const [name, setName] = useState('');\n    const [type, setType] = useState('Root Choose Styles');\n    const [description, setDescription] = useState('')\n    const [errors, setErrors] = useState({})\n    const { actions: { setState } } = useContext(globalContext);\n\n    const validate = () => {\n        const errors = {};\n        if (!name) {\n            errors.name = \"required\";\n        }\n        if (!type) {\n            errors.type = \"required\";\n        }\n        return errors;\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        console.log('Submit: \\n', name, type)\n        setErrors(validate)\n        if(!errors){\n            setState('pageName',name);\n            console.log('submitted')\n        }\n    }\n\n    return (\n        <Box align=\"center\">\n            <Box width=\"medium\" margin=\"large\">\n                <form\n                    onSubmit={onSubmit}\n                >\n                    <FormField label=\"Name of your Software\" error={errors.name}>\n                        <TextInput\n                            name=\"name\"\n                            placeholder='Jot something'\n                            onChange={e => setName(e.target.value)}\n                        />\n                    </FormField>\n                    \n                    \n                    <FormField label=\"Project Type\" error={errors.type}>\n                        \n                        <Select\n                            name=\"type\"\n                            options={[\"Root Choose Styles\", \"Remake Existing Software\", \"I have all the Assets Needed\"]}\n                            value={\"Root Choose Styles\"}\n                            onChange={event => setType( event.value)}\n                        />\n                    </FormField>\n                    <FormField label=\"Description\">\n                        <TextArea\n                            name=\"description\"\n                            value={description || \"\"}\n                            onChange={e=>setDescription(e.target.value)}\n                        />\n                    </FormField>\n                    <Box\n                        tag=\"footer\"\n                        margin={{ top: \"medium\" }}\n                        align=\"center\"\n                    >\n                        {/* <Button label=\"Cancel\" /> */}\n                        <Button type=\"submit\" primary label=\"Next\" />\n                    </Box>\n                </form>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Form","import React, { useState } from 'react';\nimport { ProfileContainer, ProfileDetails, ProfileDetailsLeft, ProfileDetailsRight } from './style/component';\nimport Form from '../App/Form/Form';\nimport { Accordion, AccordionPanel, Text, Box, Button } from 'grommet';\nimport { Desktop, Android, Apple, Robot, Workshop } from 'grommet-icons';\n\nconst Home = () => {\n    const [selectedColor, setSelectedColor] = useState('')\n    \n    return (\n        <ProfileContainer name='Profile Container 💼'>\n            \n            <h1>Estimate My App</h1>\n            <p>\n                Select the items below which best describe your app and the features you require.\n        </p>\n            <Accordion animate>\n                <AccordionPanel label=\"💼 General information\">\n                    <Box direction=\"row\" pad=\"small\" background=\"light-2\" justify=\"center\">\n                        <Box align=\"center\" justify='center' width=\"small\" >\n                                <Workshop color='plain' size='xlarge' />\n                        </Box>\n                        <Form />\n                    </Box>\n                </AccordionPanel>\n                <AccordionPanel label=\"💻/📱/🤖 Type of Software\">\n                    <Box pad=\"medium\" background=\"light-2\">\n                        <Text>What kind of software do you want?</Text>\n                        <Box\n                            direction=\"row\"\n                            border={{ color: selectedColor ? selectedColor : 'brand', size: 'large' }}\n                            pad=\"medium\"\n                            background={selectedColor}\n                        >\n                            <Box>\n                            <Button\n                                primary\n                                color='yellow'\n                                icon={<Desktop size='xlarge' />}\n                                label={\n                                    <p>Single Page Website</p>\n                                }\n                                onClick={() => setSelectedColor('yellow')}\n                            />\n                            </Box>\n                            <Box>\n                            <Button\n                                primary\n                                color='neutral-3'\n                                icon={\n                                    <>\n                                        <Android size='xlarge' color='plain' />\n                                        or\n                                    <Apple size='xlarge' color='plain' />\n                                    </>\n                                }\n                                label={\n                                    <p>App</p>\n                                }\n                                onClick={() => setSelectedColor('neutral-3')}\n                            />    \n                            </Box>\n                            <Box>\n                            <Button\n                                primary\n                                color='neutral-1'\n                                icon={<Robot size='xlarge' />}\n                                label={\n                                    <p>Other/Custom Software</p>\n                                }\n                                onClick={() => setSelectedColor('neutral-1')}\n                            />    \n                            </Box>\n                        </Box>\n                    </Box>\n                </AccordionPanel>\n            </Accordion>\n\n            <ProfileDetails>\n                <ProfileDetailsLeft>\n                    Preview\n                </ProfileDetailsLeft>\n                <ProfileDetailsRight>\n                    Settings\n                </ProfileDetailsRight>\n            </ProfileDetails>\n        </ProfileContainer>\n    )\n}\n\nexport default Home","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Page } from '../component';\nimport Home from '../page/Home/Home';\n\nconst AppRouter = () => (\n    <Router>\n        <Page>\n            <Route path=\"/\" exact component={() => <Home />} />\n        </Page>\n    </Router>\n)\n\nexport default AppRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './util/serviceWorker';\nimport AppRouter from './router/AppRouter';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}